{"version":3,"sources":["assets/images/mega-man.png","assets/images/trevor-philips.jpg","assets/images/lifestealer.jpg","assets/images/celeste.jpg","assets/images/plague-knight.webp","assets/images/miriam.jpg","assets/images/raziel.jpg","assets/images/gwyndolin.jpg","assets/images/tyrael.jpg","assets/images/reptile.jpg","assets/images/etna.jpg","assets/images/skull-kid.png","hooks/useLocalStorage.js","components/Header.js","components/Instructions.js","data/TileData.js","components/ImageGrid.js","components/GameoverModal.js","components/App.js","index.js"],"names":["module","exports","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","rightSideContainerStyles","marginLeft","display","pointerStyle","cursor","flexCenter","alignItems","Header","headerHeight","currentTheme","toggleTheme","score","bestScore","resetGame","AppBar","position","style","height","Toolbar","Typography","variant","onMouseDown","scrollTo","top","behavior","id","flexDirection","fontSize","alignSelf","DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","right","color","palette","grey","props","children","classes","onClose","other","disableTypography","className","IconButton","aria-label","onClick","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","instructionsStyles","Instructions","React","open","setOpen","useTheme","handleClose","Button","Dialog","aria-labelledby","primary","main","dividers","gutterBottom","autoFocus","light","TileData","img","MegaMan","name","game","Trevor","Lifestealer","Madeline","PlagueKnight","Miriam","Raziel","Gwyndolin","Tyrael","Reptile","Etna","SkullKid","withWidth","width","setScore","setBestScore","setIsGameover","setPlayerWon","setLastClickedTile","tiles","setTiles","alreadyClickedNames","setAlreadyClickedNames","shuffleArray","makeStyles","imageGrid","justifyItems","paddingTop","marginBottom","gridList","overflow","tile","transition","instructions","container","useStyles","useEffect","length","Container","maxWidth","GridList","cellHeight","cols","isWidthUp","e","element","target","closest","selectedCharacterName","dataset","includes","prevScore","prevNames","handleMouseDown","map","index","GridListTile","data-name","data-type","src","alt","GridListTileBar","title","subtitle","modalBackdropStyles","background","zIndex","modalStyles","left","transform","GameoverModal","playerWon","gameoverElement","useRef","playAgainButton","document","body","allTiles","querySelectorAll","forEach","type","animatedText","current","textContent","text","delayInMs","originalDelay","i","setTimeout","animateText","opacity","pointerEvents","ref","textAlign","userSelect","size","array","j","Math","floor","random","App","lightTheme","createMuiTheme","purple","darkTheme","red","themeName","setThemeName","isGameover","lastClickedTile","tileData","setCurrentTheme","documentElement","backgroundColor","ThemeProvider","ReactDOM","render","StrictMode","getElementById"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,oJC2C5BC,MAzCf,SAAyBC,EAAKC,GAAc,MAIFC,oBAAS,WAC3C,IAEI,IAAMC,EAAOC,OAAOC,aAAaC,QAAQN,GAGzC,OAAOG,EAAOI,KAAKC,MAAML,GAAQF,EACnC,MAAOQ,GAIL,OAFAC,QAAQC,IAAIF,GAELR,MAfyB,mBAIjCW,EAJiC,KAIpBC,EAJoB,KAsCxC,MAAO,CAACD,EAhBS,SAACE,GACd,IAEI,IAAMC,EAAeD,aAAiBE,SAAWF,EAAMF,GAAeE,EAGtED,EAAeE,GAGfX,OAAOC,aAAaY,QAAQjB,EAAKO,KAAKW,UAAUH,IAClD,MAAON,GAELC,QAAQC,IAAIF,O,qFC5BlBU,EAA2B,CAC7BC,WAAY,OACZC,QAAS,QAGPC,EAAe,CACjBC,OAAQ,WAGNC,EAAa,CACfH,QAAS,OACTI,WAAY,UAGD,SAASC,EAAT,GAA2F,IAAzEC,EAAwE,EAAxEA,aAAcC,EAA0D,EAA1DA,aAAcC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,UACxF,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAQC,MAAO,CAAEC,OAAO,GAAD,OAAKT,EAAL,QACpC,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,QAAQ,KACRJ,MAAO,CAAEZ,OAAQ,WACjBiB,YAAa,kBAAMpC,OAAOqC,SAAS,CAAEC,IAAK,EAAGC,SAAU,aAH3D,eAOA,yBAAKC,GAAG,uBAAuBT,MAAOhB,GAClC,yBAAKyB,GAAG,UAAUT,MAAOX,GACH,UAAjBI,EACG,kBAAC,IAAD,CAAiBO,MAAOb,EAAckB,YAAa,kBAAMX,EAAYD,MAErE,kBAAC,IAAD,CAAiBO,MAAOb,EAAckB,YAAa,kBAAMX,EAAYD,MAGzE,kBAAC,IAAD,CAAaO,MAAOb,EAAckB,YAAa,kBAAMR,QAGzD,yBAAKY,GAAG,QAAQT,MAAK,eAAOX,EAAP,CAAmBqB,cAAe,SAAUzB,WAAY,SACzE,kBAACkB,EAAA,EAAD,CAAYH,MAAO,CAAEW,SAAU,SAA/B,UAAiDhB,GACjD,kBAACQ,EAAA,EAAD,CAAYH,MAAO,CAAEW,SAAU,QAASC,UAAW,aAAnD,SAAwEhB,O,kGCtB1FiB,EAAcC,aAbL,SAACC,GAAD,MAAY,CACvBC,KAAM,CACFC,OAAQ,EACRC,QAASH,EAAMI,QAAQ,IAE3BC,YAAa,CACTrB,SAAU,WACVsB,MAAON,EAAMI,QAAQ,GACrBZ,IAAKQ,EAAMI,QAAQ,GACnBG,MAAOP,EAAMQ,QAAQC,KAAK,SAIdV,EAAmB,SAACW,GAAW,IACvCC,EAAyCD,EAAzCC,SAAUC,EAA+BF,EAA/BE,QAASC,EAAsBH,EAAtBG,QAAYC,EADO,YACGJ,EADH,kCAE9C,OACI,kBAAC,IAAD,eAAgBK,mBAAiB,EAACC,UAAWJ,EAAQX,MAAUa,GAC3D,kBAAC1B,EAAA,EAAD,CAAYC,QAAQ,MAAMsB,GACzBE,EACG,kBAACI,EAAA,EAAD,CAAYC,aAAW,QAAQF,UAAWJ,EAAQP,YAAac,QAASN,GACpE,kBAAC,IAAD,OAEJ,SAKVO,EAAgBrB,aAAW,SAACC,GAAD,MAAY,CACzCC,KAAM,CACFE,QAASH,EAAMI,QAAQ,OAFTL,CAIlBsB,KAEEC,EAAgBvB,aAAW,SAACC,GAAD,MAAY,CACzCC,KAAM,CACFC,OAAQ,EACRC,QAASH,EAAMI,QAAQ,OAHTL,CAKlBwB,KAEEC,EAAqB,CACvBxC,SAAU,WACVQ,IAAK,SACLc,MAAO,SAGI,SAASmB,IAAgB,IAAD,EACXC,IAAM1E,UAAS,GADJ,mBAC5B2E,EAD4B,KACtBC,EADsB,KAE7B5B,EAAQ6B,cAKRC,EAAc,WAChBF,GAAQ,IAGZ,OACI,yBAAKlC,GAAG,eAAeT,MAAOuC,GAC1B,kBAACO,EAAA,EAAD,CAAQ1C,QAAQ,WAAWkB,MAAM,UAAUY,QAT3B,WACpBS,GAAQ,KAQJ,gBAGA,kBAACI,EAAA,EAAD,CAAQnB,QAASiB,EAAaG,kBAAgB,0BAA0BN,KAAMA,GAC1E,kBAAC,EAAD,CACIjC,GAAG,0BACHT,MAAO,CAAEsB,MAAOP,EAAMQ,QAAQ0B,QAAQC,MACtCtB,QAASiB,GAHb,eAOA,kBAAC,EAAD,CAAeM,UAAQ,GACnB,kBAAChD,EAAA,EAAD,CAAYiD,cAAY,GAAxB,2OAMJ,kBAAC,EAAD,KACI,kBAACN,EAAA,EAAD,CACIO,WAAS,EACTnB,QAASW,EACTvB,MAAM,UACNtB,MAAO,CAAEsB,MAAOP,EAAMQ,QAAQ0B,QAAQK,QAJ1C,gB,8RCbLC,GA/DE,CACb,CACIC,IAAKC,IACLC,KAAM,WACNC,KAAM,mBAEV,CACIH,IAAKI,IACLF,KAAM,iBACNC,KAAM,sBAEV,CACIH,IAAKK,IACLH,KAAM,cACNC,KAAM,UAEV,CACIH,IAAKM,IACLJ,KAAM,WACNC,KAAM,WAEV,CACIH,IAAKO,KACLL,KAAM,gBACNC,KAAM,iBAEV,CACIH,IAAKQ,KACLN,KAAM,SACNC,KAAM,sBAEV,CACIH,IAAKS,KACLP,KAAM,SACNC,KAAM,yBAEV,CACIH,IAAKU,KACLR,KAAM,YACNC,KAAM,qBAEV,CACIH,IAAKW,KACLT,KAAM,SACNC,KAAM,iBAEV,CACIH,IAAKY,KACLV,KAAM,UACNC,KAAM,wBAEV,CACIH,IAAKa,KACLX,KAAM,OACNC,KAAM,kBAEV,CACIH,IAAKc,KACLZ,KAAM,YACNC,KAAM,mCC+BCY,sBA5Ff,YAAoN,IAA/LC,EAA8L,EAA9LA,MAAOhF,EAAuL,EAAvLA,aAAcG,EAAyK,EAAzKA,MAAO8E,EAAkK,EAAlKA,SAAU7E,EAAwJ,EAAxJA,UAAW8E,EAA6I,EAA7IA,aAAcC,EAA+H,EAA/HA,cAAeC,EAAgH,EAAhHA,aAAcC,EAAkG,EAAlGA,mBAAoBC,EAA8E,EAA9EA,MAAOC,EAAuE,EAAvEA,SAAUC,EAA6D,EAA7DA,oBAAqBC,EAAwC,EAAxCA,uBAAwBC,EAAgB,EAAhBA,aA6BzLvD,EA5BYwD,aAAW,SAACpE,GAAD,MAAY,CACrCqE,UAAW,CACPlG,QAAS,OACTwB,cAAe,SACfpB,WAAY,SACZ+F,aAAc,SACdC,WAAY9F,EAAe,GAC3B+F,aAAc,OAElBC,SAAU,CACNC,SAAU,UAEdC,KAAM,CACFtG,OAAQ,UACRuG,WAAY,kBACZ,UAAW,IAIfC,aAAc,CACV1G,QAAS,mBAEb2G,UAAW,CACP3G,QAAS,OACTa,SAAU,eAIF+F,GA8ChB,OA1BAC,qBAAU,WACFf,EAAoBgB,SAAWlB,EAAMkB,QACrCpB,GAAa,KAElB,CAACE,EAAOE,EAAqBJ,IAuB5B,6BAASnE,GAAG,aAAasB,UAAWJ,EAAQyD,WACxC,kBAACa,EAAA,EAAD,CAAWC,SAAU1B,EAAOzC,UAAWJ,EAAQkE,WAC3C,kBAACrD,EAAD,MACA,kBAAC2D,EAAA,EAAD,CAAUC,WAAY,IAAKrE,UAAWJ,EAAQ6D,SAAUa,KA/C5DC,YAAU,KAAM9B,GACT,EAGP8B,YAAU,KAAM9B,GACT,EAGP8B,YAAU,KAAM9B,GACT,EAGJ,EAmCkFnE,YAAa,SAACkG,GAAD,OAxB1G,SAAyBA,GACrB,IAAMC,EAAUD,EAAEE,OAAOC,QAAQ,MAC3BC,EAAwBH,EAAQI,QAAQlD,KAC9CmB,EAAmB2B,GAEfxB,EAAoB6B,SAASF,IACzBhH,EAAQC,GACR8E,EAAa/E,GAGjBsF,EAAuB,IACvBN,GAAc,KAEdF,GAAS,SAACqC,GAAD,OAAeA,EAAY,KACpC7B,GAAuB,SAAC8B,GAAD,4BAAmBA,GAAnB,CAA8BJ,OACrD5B,EAASG,EAAa,YAAIJ,MAS+EkC,CAAgBT,KAChHzB,EAAMmC,KAAI,SAACvB,EAAMwB,GAAP,OACP,kBAACC,EAAA,EAAD,CAActJ,IAAK6H,EAAKlC,IAAKzB,UAAWJ,EAAQ+D,KAAM0B,YAAW1B,EAAKhC,KAAM2D,YAAU,QAClF,yBAAKC,IAAK5B,EAAKlC,IAAK+D,IAAK7B,EAAKhC,OAC9B,kBAAC8D,EAAA,EAAD,CAAiBC,MAAO/B,EAAKhC,KAAMgE,SAAU,uCAAahC,EAAK/B,kBC1FrFgE,GAAsB,CACxB5H,SAAU,QACVyE,MAAO,QACPvE,OAAQ,QACR2H,WAAY,oBACZC,OAAQ,OAGNC,GAAc,CAChBtD,MAAO,MACP0B,SAAU,QACVnG,SAAU,WACVQ,IAAK,MACLwH,KAAM,MACNC,UAAW,yBAgBA,SAASC,GAAT,GAAkD,IAAzBC,EAAwB,EAAxBA,UAAWrI,EAAa,EAAbA,UACzCsI,EAAkBC,iBAAO,MACzBC,EAAkBD,iBAAO,MA+B/B,OA7BArC,qBAAU,WAENuC,SAASC,KAAKvI,MAAMyF,SAAW,SAG/B,IAAM+C,EAAWF,SAASG,iBAAiB,iBAC3CD,EAASE,SAAQ,SAAAhD,GAAI,OAAIA,EAAKkB,QAAQ+B,KAAO,MAE7C,IAAMC,EAAeV,EAAY,WAAa,YAc9C,OAXKC,EAAgBU,QAAQC,eA5BrC,SAAqBtC,EAASuC,EAAMC,GAChC,IAAMC,EAAgBD,EACtBxC,EAAQsC,YAAc,GAEtB,IAJ2C,eAIlCI,GACLC,YAAW,WACP3C,EAAQsC,aAAeC,EAAKG,KAC7BF,GAEHA,GAAaC,GALRC,EAAI,EAAGA,EAAIH,EAAK/C,OAAQkD,IAAM,EAA9BA,GAyBDE,CAAYjB,EAAgBU,QAASD,EAH3B,KAKVO,YAAW,WACHd,EAAgBQ,UAChBR,EAAgBQ,QAAQ7I,MAAMqJ,QAAU,EACxChB,EAAgBQ,QAAQ7I,MAAMsJ,cAAgB,UAR5C,IAUCV,EAAa5C,SAGrB,WACHsC,SAASC,KAAKvI,MAAMyF,SAAW,GAC/B+C,EAASE,SAAQ,SAAAhD,GAAI,OAAIA,EAAKkB,QAAQ+B,KAAO,cAMjD,yBAAK5G,UAAU,iBAAiB/B,MAAO2H,IACnC,yBAAK5F,UAAU,QAAQ/B,MAAO8H,IAC1B,kBAAC3H,EAAA,EAAD,CAAYC,QAAQ,KAAKmJ,IAAKpB,EAAiBnI,MAAO,CAAEsB,MAAO,QAASkI,UAAW,SAAUC,WAAY,UACzG,kBAAC3G,EAAA,EAAD,CAAQyG,IAAKlB,EACT/G,MAAM,UACNoI,KAAK,QACL1J,MAAO,CAAEiB,OAAQ,kBAAmB/B,QAAS,QAASmK,QAAS,IAAKC,cAAe,OAAQ3D,WAAY,eACvGtF,YAAa,kBAAMR,MAJvB,iB,gDC3DhB,SAASqF,GAAayE,GAClB,IAAK,IAAIT,EAAIS,EAAM3D,OAAS,EAAGkD,EAAI,EAAGA,IAAK,CACzC,IAAIU,EAAIC,KAAKC,MAAMD,KAAKE,UAAYb,EAAI,IADC,EAElB,CAACS,EAAMC,GAAID,EAAMT,IAAvCS,EAAMT,GAFkC,KAE9BS,EAAMC,GAFwB,KAK3C,OAAOD,EAwGIK,OArGf,WACI,IAAMC,EAAaC,aAAe,CAC9B3I,QAAS,CACLoH,KAAM,QACN1F,QAAS,CACLC,KAAMiH,KAAO,KACbvC,WAAY,WAKlBwC,EAAYF,aAAe,CAC7B3I,QAAS,CACLoH,KAAM,OACN1F,QAAS,CACLC,KAAMmH,KAAI,KACVzC,WAAY,cAhBb,EAqB6B7J,mBAAS,IArBtC,mBAqBJyB,EArBI,aAsBuB5B,EAAgB,QAAS,UAtBhD,mBAsBJ0M,EAtBI,KAsBOC,EAtBP,OAuBexM,mBAAS,GAvBxB,mBAuBJ4B,EAvBI,KAuBG8E,EAvBH,OAwBuB1G,mBAAS,GAxBhC,mBAwBJ6B,EAxBI,KAwBO8E,EAxBP,OAyByB3G,oBAAS,GAzBlC,mBAyBJyM,EAzBI,KAyBQ7F,EAzBR,OA0BuB5G,oBAAS,GA1BhC,mBA0BJmK,EA1BI,KA0BOtD,EA1BP,OA2BmC7G,mBAAS,MA3B5C,mBA2BJ0M,EA3BI,KA2Ba5F,EA3Bb,OA6Be9G,mBAASmH,GAAa,YAAIwF,MA7BzC,mBA6BJ5F,EA7BI,KA6BGC,EA7BH,OA8B2ChH,mBAAS,IA9BpD,mBA8BJiH,EA9BI,KA8BiBC,EA9BjB,OAgC6BlH,oBAAS,WAC7C,MAAqB,SAAduM,EAAuBF,EAAYH,KAjCnC,mBAgCJxK,EAhCI,KAgCUkL,EAhCV,KA8CX,SAAS9K,IACL4E,EAAS,GACTE,GAAc,GACdC,GAAa,GACbC,EAAmB,MACnBI,EAAuB,IACvBF,EAASG,GAAa,YAAIJ,KAc9B,OAVAiB,qBAAU,WACNuC,SAASsC,gBAAgB5K,MAAM6K,gBAAkBpL,EAAa8B,QAAQ0B,QAAQ2E,aAC/E,CAACnI,IAEJsG,qBAAU,WACFmC,GACAvD,GAAc,KAEnB,CAAC8F,EAAiBvC,IAGjB,kBAAC4C,GAAA,EAAD,CAAe/J,MAAOtB,GAClB,6BAASgB,GAAG,OACP+J,GAAc,kBAACvC,GAAD,CAAeC,UAAWA,EAAWrI,UAAWA,IAE/D,kBAACN,EAAD,CACIC,aAAcA,EACdC,aAAcA,EAAa8B,QAAQoH,KACnCjJ,YAtChB,SAAqB4K,GACC,UAAdA,GACAC,EAAa,QACbI,EAAgBP,IACK,SAAdE,IACPC,EAAa,SACbI,EAAgBV,KAiCRtK,MAAOA,EACPC,UAAWA,EACXC,UAAWA,IAIf,kBAAC,GAAD,CACIL,aAAcA,EACdsF,MAAOA,EACPC,SAAUA,EACVC,oBAAqBA,EACrBC,uBAAwBA,EACxBR,SAAUA,EACV7E,UAAWA,EACX8E,aAAcA,EACd/E,MAAOA,EACPgF,cAAeA,EACfC,aAAcA,EACdC,mBAAoBA,EACpBK,aAAcA,QC/GlC6F,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,OAEJ3C,SAAS4C,eAAe,W","file":"static/js/main.e37684cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mega-man.18b5c425.png\";","module.exports = __webpack_public_path__ + \"static/media/trevor-philips.0bc6c558.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lifestealer.fea3b322.jpg\";","module.exports = __webpack_public_path__ + \"static/media/celeste.fa918dd8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/plague-knight.3a76b04b.webp\";","module.exports = __webpack_public_path__ + \"static/media/miriam.4b80e470.jpg\";","module.exports = __webpack_public_path__ + \"static/media/raziel.d3a07968.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gwyndolin.ecf18b12.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tyrael.2278b80c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/reptile.bee21973.jpg\";","module.exports = __webpack_public_path__ + \"static/media/etna.64a6162a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/skull-kid.62d445e8.png\";","import { useState } from 'react';\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n    // State to store our value\r\n    // Pass initial state function to useState so logic is only executed once\r\n\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n        try {\r\n            // Get from local storage by key\r\n            const item = window.localStorage.getItem(key);\r\n\r\n            // Parse stored json or if none return initialValue\r\n            return item ? JSON.parse(item) : initialValue;\r\n        } catch (error) {\r\n            // If error also return initialValue\r\n            console.log(error);\r\n\r\n            return initialValue;\r\n        }\r\n    });\r\n\r\n    // Return a wrapped version of useState's setter function that ...\r\n    // ... persists the new value to localStorage.\r\n\r\n    const setValue = (value) => {\r\n        try {\r\n            // Allow value to be a function so we have same API as useState\r\n            const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n\r\n            // Save state\r\n            setStoredValue(valueToStore);\r\n\r\n            // Save to local storage\r\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n        } catch (error) {\r\n            // A more advanced implementation would handle the error case\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Brightness2Icon from '@material-ui/icons/Brightness2';\r\nimport Brightness5Icon from '@material-ui/icons/Brightness5';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nconst rightSideContainerStyles = {\r\n    marginLeft: 'auto',\r\n    display: 'flex',\r\n};\r\n\r\nconst pointerStyle = {\r\n    cursor: 'pointer',\r\n};\r\n\r\nconst flexCenter = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n};\r\n\r\nexport default function Header({ headerHeight, currentTheme, toggleTheme, score, bestScore, resetGame }) {\r\n    return (\r\n        <AppBar position='fixed' style={{ height: `${headerHeight}px` }}>\r\n            <Toolbar>\r\n                <Typography\r\n                    variant='h6'\r\n                    style={{ cursor: 'pointer' }}\r\n                    onMouseDown={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\r\n                >\r\n                    Memory Game\r\n                </Typography>\r\n                <div id='right-side-container' style={rightSideContainerStyles}>\r\n                    <div id='options' style={flexCenter}>\r\n                        {currentTheme === 'light' ? (\r\n                            <Brightness2Icon style={pointerStyle} onMouseDown={() => toggleTheme(currentTheme)} />\r\n                        ) : (\r\n                            <Brightness5Icon style={pointerStyle} onMouseDown={() => toggleTheme(currentTheme)} />\r\n                        )}\r\n\r\n                        <RefreshIcon style={pointerStyle} onMouseDown={() => resetGame()} />\r\n                    </div>\r\n\r\n                    <div id='score' style={{ ...flexCenter, flexDirection: 'column', marginLeft: '1em' }}>\r\n                        <Typography style={{ fontSize: '1rem' }}>Score: {score}</Typography>\r\n                        <Typography style={{ fontSize: '.7rem', alignSelf: 'flex-end' }}>Best: {bestScore}</Typography>\r\n                    </div>\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { withStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant='h6'>{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label='close' className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nconst instructionsStyles = {\r\n    position: 'absolute',\r\n    top: '-2.6em',\r\n    right: '1.5em',\r\n};\r\n\r\nexport default function Instructions() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const theme = useTheme();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div id='instructions' style={instructionsStyles}>\r\n            <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n                Instructions\r\n            </Button>\r\n            <Dialog onClose={handleClose} aria-labelledby='customized-dialog-title' open={open}>\r\n                <DialogTitle\r\n                    id='customized-dialog-title'\r\n                    style={{ color: theme.palette.primary.main }}\r\n                    onClose={handleClose}\r\n                >\r\n                    How To Play\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <Typography gutterBottom>\r\n                        Begin by selecting a character. After each selection, the characters will shuffle and you'll\r\n                        have to pick again. You must avoid picking the same character more than once, otherwise it's\r\n                        game over. Can you make it through them all?\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        autoFocus\r\n                        onClick={handleClose}\r\n                        color='primary'\r\n                        style={{ color: theme.palette.primary.light }}\r\n                    >\r\n                        Play Game\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import MegaMan from '../assets/images/mega-man.png';\r\nimport Trevor from '../assets/images/trevor-philips.jpg';\r\nimport Lifestealer from '../assets/images/lifestealer.jpg';\r\nimport Madeline from '../assets/images/celeste.jpg';\r\nimport PlagueKnight from '../assets/images/plague-knight.webp';\r\nimport Miriam from '../assets/images/miriam.jpg';\r\nimport Raziel from '../assets/images/raziel.jpg';\r\nimport Gwyndolin from '../assets/images/gwyndolin.jpg';\r\nimport Tyrael from '../assets/images/tyrael.jpg';\r\nimport Reptile from '../assets/images/reptile.jpg';\r\nimport Etna from '../assets/images/etna.jpg';\r\nimport SkullKid from '../assets/images/skull-kid.png';\r\n\r\nconst TileData = [\r\n    {\r\n        img: MegaMan,\r\n        name: 'Mega Man',\r\n        game: 'Mega Man series',\r\n    },\r\n    {\r\n        img: Trevor,\r\n        name: 'Trevor Philips',\r\n        game: 'Grand Theft Auto V',\r\n    },\r\n    {\r\n        img: Lifestealer,\r\n        name: 'Lifestealer',\r\n        game: 'Dota 2',\r\n    },\r\n    {\r\n        img: Madeline,\r\n        name: 'Madeline',\r\n        game: 'Celeste',\r\n    },\r\n    {\r\n        img: PlagueKnight,\r\n        name: 'Plague Knight',\r\n        game: 'Shovel Knight',\r\n    },\r\n    {\r\n        img: Miriam,\r\n        name: 'Miriam',\r\n        game: 'Bloodstained: RoTN',\r\n    },\r\n    {\r\n        img: Raziel,\r\n        name: 'Raziel',\r\n        game: 'Legacy of Kain series',\r\n    },\r\n    {\r\n        img: Gwyndolin,\r\n        name: 'Gwyndolin',\r\n        game: 'Dark Souls series',\r\n    },\r\n    {\r\n        img: Tyrael,\r\n        name: 'Tyrael',\r\n        game: 'Diablo series',\r\n    },\r\n    {\r\n        img: Reptile,\r\n        name: 'Reptile',\r\n        game: 'Mortal Kombat series',\r\n    },\r\n    {\r\n        img: Etna,\r\n        name: 'Etna',\r\n        game: 'Disgaea series',\r\n    },\r\n    {\r\n        img: SkullKid,\r\n        name: 'Skull Kid',\r\n        game: \"Legend of Zelda: Majora's Mask\",\r\n    },\r\n];\r\n\r\nexport default TileData;\r\n","import React, { useEffect } from 'react';\r\nimport Instructions from './Instructions';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport Container from '@material-ui/core/Container';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport tileData from '../data/TileData';\r\n\r\n\r\nfunction ImageGrid({ width, headerHeight, score, setScore, bestScore, setBestScore, setIsGameover, setPlayerWon, setLastClickedTile, tiles, setTiles, alreadyClickedNames, setAlreadyClickedNames, shuffleArray }) {\r\n    const useStyles = makeStyles((theme) => ({\r\n        imageGrid: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyItems: 'center',\r\n            paddingTop: headerHeight + 80,\r\n            marginBottom: '3em',\r\n        },\r\n        gridList: {\r\n            overflow: 'hidden',\r\n        },\r\n        tile: {\r\n            cursor: 'pointer',\r\n            transition: 'all 1s fade-out',\r\n            '&:hover': {\r\n                // animation: 'popout .3s ease forwards',\r\n            },\r\n        },\r\n        instructions: {\r\n            display: 'none !important',\r\n        },\r\n        container: {\r\n            display: 'flex',\r\n            position: 'relative',\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    const getGridListCols = () => {\r\n        if (isWidthUp('xl', width)) {\r\n            return 4;\r\n        }\r\n\r\n        if (isWidthUp('lg', width)) {\r\n            return 3;\r\n        }\r\n\r\n        if (isWidthUp('md', width)) {\r\n            return 2;\r\n        }\r\n\r\n        return 1;\r\n    };\r\n\r\n\r\n    // Check win condition\r\n    useEffect(() => {\r\n        if (alreadyClickedNames.length === tiles.length) {\r\n            setPlayerWon(true);\r\n        }\r\n    }, [tiles, alreadyClickedNames, setPlayerWon])\r\n\r\n    function handleMouseDown(e) {\r\n        const element = e.target.closest('li');\r\n        const selectedCharacterName = element.dataset.name;\r\n        setLastClickedTile(element);\r\n        \r\n        if (alreadyClickedNames.includes(selectedCharacterName)) {\r\n            if (score > bestScore) {\r\n                setBestScore(score);\r\n            }\r\n\r\n            setAlreadyClickedNames([]);\r\n            setIsGameover(true);\r\n        } else {\r\n            setScore((prevScore) => prevScore + 1);\r\n            setAlreadyClickedNames((prevNames) => [...prevNames, selectedCharacterName])\r\n            setTiles(shuffleArray([...tiles]))\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <section id='image-grid' className={classes.imageGrid}>\r\n            <Container maxWidth={width} className={classes.container}>\r\n                <Instructions />\r\n                <GridList cellHeight={250} className={classes.gridList} cols={getGridListCols()} onMouseDown={(e) => handleMouseDown(e)}>\r\n                    {tiles.map((tile, index) => (\r\n                        <GridListTile key={tile.img} className={classes.tile} data-name={tile.name} data-type='tile'>\r\n                            <img src={tile.img} alt={tile.name} />\r\n                            <GridListTileBar title={tile.name} subtitle={<span>From: {tile.game}</span>} />\r\n                        </GridListTile>\r\n                    ))}\r\n                </GridList>\r\n            </Container>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default withWidth()(ImageGrid);\r\n","import React, { useEffect, useRef } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst modalBackdropStyles = {\r\n    position: 'fixed',\r\n    width: '100vw',\r\n    height: '100vh',\r\n    background: 'rgba(0, 0, 0, .9)',\r\n    zIndex: '999'\r\n}\r\n\r\nconst modalStyles = {\r\n    width: '90%',\r\n    maxWidth: '600px',\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)'\r\n}\r\n\r\nfunction animateText(element, text, delayInMs) {\r\n    const originalDelay = delayInMs;\r\n    element.textContent = '';\r\n\r\n    for (let i = 0; i < text.length; i++) {\r\n        setTimeout(() => {\r\n            element.textContent += text[i];\r\n        }, delayInMs)\r\n\r\n        delayInMs += originalDelay;\r\n    }\r\n}\r\n\r\nexport default function GameoverModal({ playerWon, resetGame }) {\r\n    const gameoverElement = useRef(null);\r\n    const playAgainButton = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Disable scrolling while modal is rendered & animate gameover text\r\n        document.body.style.overflow = 'hidden';\r\n\r\n        // Remove data-type tile from all tiles. Needed to prevent hover effect from occuring after gameover\r\n        const allTiles = document.querySelectorAll('li[data-type]');\r\n        allTiles.forEach(tile => tile.dataset.type = '');\r\n\r\n        const animatedText = playerWon ? 'You win!' : 'Gameover!';\r\n        const delay = 125;\r\n\r\n        if (!gameoverElement.current.textContent) {\r\n            animateText(gameoverElement.current, animatedText, delay);\r\n\r\n            setTimeout(() => {\r\n                if (playAgainButton.current) {\r\n                    playAgainButton.current.style.opacity = 1;\r\n                    playAgainButton.current.style.pointerEvents = 'auto';\r\n                }\r\n            }, delay * animatedText.length);\r\n        }\r\n\r\n        return () => {\r\n            document.body.style.overflow = '';\r\n            allTiles.forEach(tile => tile.dataset.type = 'tile');\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"modal-backdrop\" style={modalBackdropStyles}>\r\n            <div className=\"modal\" style={modalStyles}>\r\n                <Typography variant='h2' ref={gameoverElement} style={{ color: 'white', textAlign: 'center', userSelect: 'none' }}></Typography>\r\n                <Button ref={playAgainButton}\r\n                    color='primary'\r\n                    size='large'\r\n                    style={{ margin: '2em auto 0 auto', display: 'block', opacity: '0', pointerEvents: 'none', transition: 'all 1s ease' }}\r\n                    onMouseDown={() => resetGame()}>\r\n                    Play again?\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Header from './Header';\nimport ImageGrid from './ImageGrid';\nimport GameoverModal from './GameoverModal';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { red, purple } from '@material-ui/core/colors';\nimport { ThemeProvider } from '@material-ui/styles';\nimport tileData from '../data/TileData';\n\nimport '../styles/styles.css';\n\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n\n    return array;\n}\n\nfunction App() {\n    const lightTheme = createMuiTheme({\n        palette: {\n            type: 'light',\n            primary: {\n                main: purple[700],\n                background: '#fff',\n            },\n        },\n    });\n\n    const darkTheme = createMuiTheme({\n        palette: {\n            type: 'dark',\n            primary: {\n                main: red[700],\n                background: '#1d1d1d',\n            },\n        },\n    });\n\n    const [headerHeight, setHeaderHeight] = useState(60);\n    const [themeName, setThemeName] = useLocalStorage('theme', 'light');\n    const [score, setScore] = useState(0);\n    const [bestScore, setBestScore] = useState(0);\n    const [isGameover, setIsGameover] = useState(false);\n    const [playerWon, setPlayerWon] = useState(false);\n    const [lastClickedTile, setLastClickedTile] = useState(null);\n\n    const [tiles, setTiles] = useState(shuffleArray([...tileData]))\n    const [alreadyClickedNames, setAlreadyClickedNames] = useState([]);\n\n    const [currentTheme, setCurrentTheme] = useState(() => {\n        return themeName === 'dark' ? darkTheme : lightTheme;\n    });\n\n    function toggleTheme(themeName) {\n        if (themeName === 'light') {\n            setThemeName('dark');\n            setCurrentTheme(darkTheme);\n        } else if (themeName === 'dark') {\n            setThemeName('light');\n            setCurrentTheme(lightTheme);\n        }\n    }\n\n    function resetGame() {\n        setScore(0);\n        setIsGameover(false);\n        setPlayerWon(false);\n        setLastClickedTile(null);\n        setAlreadyClickedNames([]);\n        setTiles(shuffleArray([...tiles]));\n    }\n\n    // Set theme background on html element\n    useEffect(() => {\n        document.documentElement.style.backgroundColor = currentTheme.palette.primary.background;\n    }, [currentTheme]);\n\n    useEffect(() => {\n        if (playerWon) {\n            setIsGameover(true);\n        }\n    }, [lastClickedTile, playerWon])\n\n    return (\n        <ThemeProvider theme={currentTheme}>\n            <section id='app'>\n                {isGameover && <GameoverModal playerWon={playerWon} resetGame={resetGame}/>}\n                \n                <Header\n                    headerHeight={headerHeight}\n                    currentTheme={currentTheme.palette.type}\n                    toggleTheme={toggleTheme}\n                    score={score}\n                    bestScore={bestScore}\n                    resetGame={resetGame}\n                    \n                />\n\n                <ImageGrid \n                    headerHeight={headerHeight} \n                    tiles={tiles}\n                    setTiles={setTiles}\n                    alreadyClickedNames={alreadyClickedNames}\n                    setAlreadyClickedNames={setAlreadyClickedNames}\n                    setScore={setScore}\n                    bestScore={bestScore} \n                    setBestScore={setBestScore} \n                    score={score} \n                    setIsGameover={setIsGameover}\n                    setPlayerWon={setPlayerWon}\n                    setLastClickedTile={setLastClickedTile}\n                    shuffleArray={shuffleArray}\n                />\n            </section>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}